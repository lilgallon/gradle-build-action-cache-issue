name: build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "**" ]
    paths:
      - .github/workflows/ci.yml
      - '**/*.kt'
      - '**/*.kts'
      - '**/*.proto'
      - 'gradle.properties'
      - 'gradle/**'

permissions:
  contents: read
  actions: write

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: lilgallon/gradle-build-action-cache-issue

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build common
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
        with:
          gradle-version: 7.6
          build-root-directory: systems/common
          arguments: build --parallel --no-daemon --scan -x test "-Dorg.gradle.jvmargs=-Xmx2G -XX:MaxMetaspaceSize=1G"
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

#      - name: Build all
#        uses: gradle/gradle-build-action@v2
#        env:
#          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
#        with:
#          gradle-version: 7.6
#          arguments: build --parallel --no-daemon --scan -x test "-Dorg.gradle.jvmargs=-Xmx2G -XX:MaxMetaspaceSize=1G"
#          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
#
#      - name: Run tests
#        uses: gradle/gradle-build-action@v2
#        env:
#          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
#        with:
#          gradle-version: 7.6
#          arguments: test --no-parallel --no-daemon --scan "-Dorg.gradle.jvmargs=-Xmx2G -XX:MaxMetaspaceSize=1G"
#          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Cache doctor
        uses: actions/github-script@v6
        with:
          script: |
            console.log("Preparing for consultation on potential cache issues")

            // Can be useful to set this value to prevent deleting cache entries that are
            // bigger than this amount of MegaBytes. In case a user relaunch a build, it
            // can prevent regenerating cache if it has already been generated (if it is
            // already generated, it is usually big)
            const settings = {
              maxMBtoDeleteEntry: -1, // infinite
              branchThatCanWriteInCache: ['develop']
            }
            
            console.log('Settings:')
            console.log(settings)
            
            if (settings.branchThatCanWriteInCache.indexOf(context.ref) === -1) {
              console.log('Doctor\'s office is not open')
              return
            }

            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "v7-gradle|Linux|build",
              sort: "created_at"
            })
            
            console.log("We are interested by sha: " + context.sha)
            console.log("We are also interested by cache entries > " + context.sha)
            console.log("Fetched cache entries:")
            console.log()
            console.log(caches.data.actions_caches)
            console.log()
            
            const gradleHomeCacheEntries = caches.data.actions_caches.filter((cache) => {
              const sizeLimitCheck = settings.maxMBtoDeleteEntry == -1 ? true : cache.size_in_bytes < settings.maxMBtoDeleteEntry*1048576 
              return cache.key.endsWith(context.sha) && sizeLimitCheck
            })
            
            if (gradleHomeCacheEntries.length == 0) {
              console.log("Consultation ended with no issue found, nice!")
            } else if (gradleHomeCacheEntries.length == 1) {
              console.log("Consultation ended with one issue found")
              console.log("We are going to proceed with a surgical intervention on the cache tumor")
              console.log(gradleHomeCacheEntries[0])
            
              const response = github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: gradleHomeCacheEntries[0].id,
              })
            
              console.log("The surgical intervention has been a success")
            } else {
              console.log("Consultation ended with multiple tumors found")
              console.log("It should never happen, proceeding with a surgical intervention on the cache tumors nonetheless")
              for (const cache of gradleHomeCacheEntries) {
                console.log(cache)
                github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
              }
            }
            
            console.log("Doctor consultation terminated, you can go work now")
